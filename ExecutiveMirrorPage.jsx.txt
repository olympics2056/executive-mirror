import React from "react"
import { motion } from "framer-motion"
import { Brain, Target, Compass, LineChart, HeartHandshake, ShieldCheck, AlertTriangle, ArrowRight, Printer } from "lucide-react"

// ---- Data (feel free to tweak text inline) ----
const coreIdentity = "A visionary technical leader who bridges deep expertise in oils & fats with strategic foresight, business acumen, and AI‑driven innovation."

const psychological = [
{ title: "MBTI", detail: "ENTJ / INTJ – The Visionary Executive. Natural strategist, systems thinker, decisive, forward‑looking." },
{ title: "Big Five", detail: "Openness: Very High • Conscientiousness: Very High • Extraversion: Medium – balanced; enjoys engaging with people when leading, but also values solo focus for deep work • Agreeableness: Medium‑High • Neuroticism: Low‑Medium" },
{ title: "Enneagram", detail: "Type 3 (Achiever) with Type 5 (Investigator) wing – ambitious, adaptable, analytical." },
];

const strengths = [
{ icon: <Brain className="w-5 h-5" />, title: "Technical Mastery", desc: "Oils & fats chemistry, processing, and regulations." },
{ icon: <Compass className="w-5 h-5" />, title: "Strategic Thinking", desc: "Markets, supply chains, and financial management." },
{ icon: <HeartHandshake className="w-5 h-5" />, title: "Leadership", desc: "R&D direction, mentoring, cross‑functional influence." },
{ icon: <LineChart className="w-5 h-5" />, title: "Innovation", desc: "AI tools, dashboards, and data systems for decisions." },
{ icon: <ShieldCheck className="w-5 h-5" />, title: "Resilience", desc: "Turns setbacks into learning and forward motion." },
];

const mirrorRows = [
{
strength: "Strategic Thinker (ENTJ/INTJ)",
weakness: "Blind Spot in Emotions",
growth: "Do direct emotional check‑ins; don’t assume silence = alignment.",
},
{
strength: "High Openness & Conscientiousness",
weakness: "Delayed Boundaries",
growth: "Define non‑negotiables early; state decisions clearly and calmly.",
},
{
strength: "Technical Mastery (Oils & Fats)",
weakness: "Kindness Misread",
growth: "Pair love/help with accountability and explicit expectations.",
},
{
strength: "Resilient, Innovative, Visionary",
weakness: "Over‑Cooperation",
growth: "Self‑advocate visibly; say yes with conditions and credit.",
},
];

const weaknesses = [
{
title: "Blind Spot in Emotional Reading",
example: "Didn’t detect partner’s inner feelings/affairs until late.",
cause: "Equates deeds of care with emotional connection.",
strategy: "Schedule honest check‑ins; watch for tone/behavior shifts early.",
},
{
title: "Delayed Boundary‑Setting",
example: "Respect erodes into directing your career moves.",
cause: "Harmony‑seeking, conflict avoidance.",
strategy: "Name your non‑negotiables; use language like ‘This decision is mine.’",
},
{
title: "Kindness Without Edges",
example: "Teen takes advantage of generosity; partner assumes flexibility.",
cause: "Belief that affection alone sustains mutual respect.",
strategy: "Balance warmth with rules and consequences; reciprocity check‑ins.",
},
{
title: "Over‑Cooperation at Work",
example: "Reliability exploited; recognition lags.",
cause: "Team‑first mindset + aversion to self‑promotion.",
strategy: "Make contributions visible; ask for credit/scope when saying yes.",
},
];

const mantra = "My kindness is strongest when it has edges — clear boundaries turn care into respect."

// ---- Simple SVG Mirror Diagram ----
function MirrorDiagram() {
return (
<svg viewBox="0 0 1200 520" className="w-full h-auto">
<defs>
<filter id="shadow" x="-20%" y="-20%" width="140%" height="140%">
<feDropShadow dx="0" dy="6" stdDeviation="8" floodOpacity="0.12" />
</filter>
</defs>

{/* Headers */}
<text x="120" y="40" className="fill-slate-700" style={{ fontSize: 18, fontWeight: 700 }}>Strength</text>
<text x="560" y="40" className="fill-slate-700" style={{ fontSize: 18, fontWeight: 700 }}>Growth Strategy</text>
<text x="960" y="40" className="fill-slate-700" style={{ fontSize: 18, fontWeight: 700, textAnchor: 'end' }}>Weakness</text>

{mirrorRows.map((row, i) => {
const y = 100 + i * 100;
return (
<g key={i} filter="url(#shadow)">
{/* Strength card */}
<rect x="40" y={y - 30} width="360" height="70" rx="14" className="fill-white" />
<rect x="40" y={y - 30} width="360" height="70" rx="14" className="stroke-slate-200" fill="none" />
<text x="60" y={y + 5} className="fill-slate-800" style={{ fontSize: 14 }}>{row.strength}</text>

{/* Growth card */}
<rect x="420" y={y - 30} width="360" height="70" rx="14" className="fill-white" />
<rect x="420" y={y - 30} width="360" height="70" rx="14" className="stroke-slate-200" fill="none" />
<text x="440" y={y + 5} className="fill-slate-800" style={{ fontSize: 14 }}>{row.growth}</text>

{/* Weakness card */}
<rect x="800" y={y - 30} width="360" height="70" rx="14" className="fill-white" />
<rect x="800" y={y - 30} width="360" height="70" rx="14" className="stroke-slate-200" fill="none" />
<text x="820" y={y + 5} className="fill-slate-800" style={{ fontSize: 14 }}>{row.weakness}</text>

{/* Arrows */}
<line x1="400" y1={y + 5} x2="420" y2={y + 5} className="stroke-slate-400" strokeWidth="2" markerEnd="url(#arrow)" />
<line x1="780" y1={y + 5} x2="800" y2={y + 5} className="stroke-slate-400" strokeWidth="2" markerEnd="url(#arrow)" />
</g>
);
})}

<defs>
<marker id="arrow" markerWidth="10" markerHeight="10" refX="6" refY="3" orient="auto">
<path d="M0,0 L0,6 L9,3 z" className="fill-slate-400" />
</marker>
</defs>
</svg>
);
}

// ---- Small UI helpers ----
const Card = ({ children, className = "" }) => (
<div className={`rounded-2xl shadow-sm border border-slate-200 bg-white p-5 ${className}`}>{children}</div>
);

const Section = ({ title, icon, children, className = "" }) => (
<section className={`space-y-4 ${className}`}>
<div className="flex items-center gap-2">
{icon}
<h2 className="text-xl font-semibold text-slate-800">{title}</h2>
</div>
{children}
</section>
);

// ---- Assessment Components ----
import { useState, useMemo } from "react"

function Likert({ label, value, onChange, min=1, max=5 }) {
return (
<div className="space-y-2">
<div className="text-sm font-medium text-slate-800">{label}</div>
<input
type="range"
min={min}
max={max}
step={1}
value={value}
onChange={(e)=>onChange(Number(e.target.value))}
className="w-full"
/>
<div className="flex justify-between text-xs text-slate-500">
<span>{min}</span>
<span>{value}</span>
<span>{max}</span>
</div>
</div>
);
}

function CoreIdentityAssessment({ onReport }) {
const [q1, setQ1] = useState(3); // leadership / taking charge
const [q2, setQ2] = useState(3); // systems / structure
const [q3, setQ3] = useState(3); // emotional attunement
const [q4, setQ4] = useState(3); // overcommit / boundaries (reverse)
const [q5, setQ5] = useState(3); // deep work vs meetings (introversion)
const [q6, setQ6] = useState(3); // self-advocacy / visibility
const [notes, setNotes] = useState("");

const scores = useMemo(()=>{
const leadership = q1;
const systems = q2;
const attunement = q3;
const boundaryRisk = q4; // higher means more likely to overcommit
const deepWork = q5;
const advocacy = q6;
return { leadership, systems, attunement, boundaryRisk, deepWork, advocacy };
}, [q1,q2,q3,q4,q5,q6]);

function generateReport() {
const { leadership, systems, attunement, boundaryRisk, deepWork, advocacy } = scores;
// Simple MBTI-ish tilt
const IorE = deepWork >= 3 ? "Introvert-leaning" : "Extravert-leaning"
const JorP = systems >= 3 ? "Structured (J)" : "Flexible (P)"
const LeaderTag = leadership >= 4 ? "Natural Driver" : leadership <= 2 ? "Selective Leader" : "Situational Leader"
const BoundaryTag = boundaryRisk >= 4 ? "Watch Boundaries" : "Healthy Boundaries"

// Synthesis
const core = `You come across as a ${LeaderTag} with ${JorP} habits and ${IorE} focus. You value systems (${systems}/5) and ${deepWork >= 3 ? "deep solo work" : "collaborative energy"}.`;

const strengths = [];
if (leadership >= 4) strengths.push("decisive direction-setting");
if (systems >= 4) strengths.push("systems thinking & planning");
if (advocacy >= 4) strengths.push("visible self-advocacy");
if (attunement >= 4) strengths.push("emotional attunement");
if (deepWork >= 4) strengths.push("focus and analytical depth");

const risks = [];
if (boundaryRisk >= 4) risks.push("overcommitting without clear boundaries");
if (attunement <= 2) risks.push("missing subtle emotional signals");
if (advocacy <= 2) risks.push("under-crediting your contributions");

const growth = [];
if (boundaryRisk >= 4) growth.push("Define non-negotiables early; say yes with scope and credit.");
if (attunement <= 2) growth.push("Schedule regular check-ins to surface unspoken concerns.");
if (advocacy <= 2) growth.push("Practice visible wins: monthly impact notes or stakeholder emails.");

const report = {
summary: core,
tags: [LeaderTag, JorP, IorE, BoundaryTag],
strengths: strengths.length? strengths: ["balanced capability across domains"],
risks: risks.length? risks: ["no acute risk detected; maintain feedback loops"],
growth: growth.length? growth: ["Keep pairing kindness with clear edges and accountability."],
notes,
raw: scores,
};
onReport?.(report);
}

return (
<Card>
<div className="space-y-6">
<h3 className="text-lg font-semibold">CORe Identity Quick Assessment</h3>
<p className="text-sm text-slate-600">Answer 6 sliders (1–5). 1 = strongly disagree, 5 = strongly agree.</p>
<div className="grid grid-cols-1 md:grid-cols-2 gap-6">
<Likert label="1) I naturally take charge and set direction in ambiguous situations." value={q1} onChange={setQ1} />
<Likert label="2) I prefer building systems/dashboards over improvising on the fly." value={q2} onChange={setQ2} />
<Likert label="3) I proactively track how people feel and check in directly." value={q3} onChange={setQ3} />
<Likert label="4) I often overcommit to help others, even if it costs me." value={q4} onChange={setQ4} />
<Likert label="5) I enjoy deep solo work more than constant meetings." value={q5} onChange={setQ5} />
<Likert label="6) I share wins and ask for credit when appropriate." value={q6} onChange={setQ6} />
</div>
<div>
<label className="block text-sm font-medium text-slate-800 mb-1">Personal Notes (anything about yourself)</label>
<textarea value={notes} onChange={(e)=>setNotes(e.target.value)} rows={4} className="w-full rounded-xl border border-slate-300 p-3 focus:outline-none focus:ring-2 focus:ring-slate-300" placeholder="Add context: role, industry, recent challenges, goals..." />
</div>
<div className="flex justify-end">
<button onClick={generateReport} className="rounded-xl border border-slate-300 px-4 py-2 text-sm hover:bg-slate-100">Generate CORe Identity Report</button>
</div>
</div>
</Card>
);
}

function CoreIdentityReport({ report }) {
if (!report) return null;
const { summary, tags, strengths, risks, growth, notes, raw } = report;
return (
<Card>
<div className="space-y-4">
<h3 className="text-lg font-semibold">Your CORe Identity Report</h3>
<p className="text-slate-700">{summary}</p>
<div className="flex flex-wrap gap-2">
{tags.map((t,i)=> (
<span key={i} className="text-xs px-2 py-1 rounded-full border border-slate-300 bg-white">{t}</span>
))}
</div>
<div className="grid grid-cols-1 md:grid-cols-3 gap-6">
<div>
<div className="font-semibold mb-1">Strengths</div>
<ul className="list-disc pl-5 text-sm text-slate-700 space-y-1">
{strengths.map((s,i)=>(<li key={i}>{s}</li>))}
</ul>
</div>
<div>
<div className="font-semibold mb-1">Risks / Watchouts</div>
<ul className="list-disc pl-5 text-sm text-slate-700 space-y-1">
{risks.map((r,i)=>(<li key={i}>{r}</li>))}
</ul>
</div>
<div>
<div className="font-semibold mb-1">Growth Actions</div>
<ul className="list-disc pl-5 text-sm text-slate-700 space-y-1">
{growth.map((g,i)=>(<li key={i}>{g}</li>))}
</ul>
</div>
</div>
{notes && (
<div>
<div className="font-semibold mb-1">Your Notes</div>
<p className="text-sm text-slate-700 whitespace-pre-wrap">{notes}</p>
</div>
)}
<details className="text-xs text-slate-500">
<summary>Raw Scores</summary>
<pre className="mt-1 bg-slate-50 p-2 rounded-lg border border-slate-200">{JSON.stringify(raw, null, 2)}</pre>
</details>
</div>
</Card>
);
}

// ---- Assessment Components ----
import { useState, useMemo } from "react"

function Likert({ label, value, onChange, min=1, max=5 }) {
return (
<div className="space-y-2">
<div className="text-sm font-medium text-slate-800">{label}</div>
<input
type="range"
min={min}
max={max}
step={1}
value={value}
onChange={(e)=>onChange(Number(e.target.value))}
className="w-full"
/>
<div className="flex justify-between text-xs text-slate-500">
<span>{min}</span>
<span>{value}</span>
<span>{max}</span>
</div>
</div>
);
}

function CoreIdentityAssessment({ onReport }) {
const [q1, setQ1] = useState(3); // leadership / taking charge
const [q2, setQ2] = useState(3); // systems / structure
const [q3, setQ3] = useState(3); // emotional attunement
const [q4, setQ4] = useState(3); // overcommit / boundaries (reverse)
const [q5, setQ5] = useState(3); // deep work vs meetings (introversion)
const [q6, setQ6] = useState(3); // self-advocacy / visibility
const [notes, setNotes] = useState("");

const scores = useMemo(()=>{
const leadership = q1;
const systems = q2;
const attunement = q3;
const boundaryRisk = q4; // higher means more likely to overcommit
const deepWork = q5;
const advocacy = q6;
return { leadership, systems, attunement, boundaryRisk, deepWork, advocacy };
}, [q1,q2,q3,q4,q5,q6]);

function generateReport() {
const { leadership, systems, attunement, boundaryRisk, deepWork, advocacy } = scores;
// Simple MBTI-ish tilt
const IorE = deepWork >= 3 ? "Introvert-leaning" : "Extravert-leaning"
const JorP = systems >= 3 ? "Structured (J)" : "Flexible (P)"
const LeaderTag = leadership >= 4 ? "Natural Driver" : leadership <= 2 ? "Selective Leader" : "Situational Leader"
const BoundaryTag = boundaryRisk >= 4 ? "Watch Boundaries" : "Healthy Boundaries"

// Synthesis
const core = `You come across as a ${LeaderTag} with ${JorP} habits and ${IorE} focus. You value systems (${systems}/5) and ${deepWork >= 3 ? "deep solo work" : "collaborative energy"}.`;

const strengths = [];
if (leadership >= 4) strengths.push("decisive direction-setting");
if (systems >= 4) strengths.push("systems thinking & planning");
if (advocacy >= 4) strengths.push("visible self-advocacy");
if (attunement >= 4) strengths.push("emotional attunement");
if (deepWork >= 4) strengths.push("focus and analytical depth");

const risks = [];
if (boundaryRisk >= 4) risks.push("overcommitting without clear boundaries");
if (attunement <= 2) risks.push("missing subtle emotional signals");
if (advocacy <= 2) risks.push("under-crediting your contributions");

const growth = [];
if (boundaryRisk >= 4) growth.push("Define non-negotiables early; say yes with scope and credit.");
if (attunement <= 2) growth.push("Schedule regular check-ins to surface unspoken concerns.");
if (advocacy <= 2) growth.push("Practice visible wins: monthly impact notes or stakeholder emails.");

const report = {
summary: core,
tags: [LeaderTag, JorP, IorE, BoundaryTag],
strengths: strengths.length? strengths: ["balanced capability across domains"],
risks: risks.length? risks: ["no acute risk detected; maintain feedback loops"],
growth: growth.length? growth: ["Keep pairing kindness with clear edges and accountability."],
notes,
raw: scores,
};
onReport?.(report);
}

return (
<Card>
<div className="space-y-6">
<h3 className="text-lg font-semibold">CORe Identity Quick Assessment</h3>
<p className="text-sm text-slate-600">Answer 6 sliders (1–5). 1 = strongly disagree, 5 = strongly agree.</p>
<div className="grid grid-cols-1 md:grid-cols-2 gap-6">
<Likert label="1) I naturally take charge and set direction in ambiguous situations." value={q1} onChange={setQ1} />
<Likert label="2) I prefer building systems/dashboards over improvising on the fly." value={q2} onChange={setQ2} />
<Likert label="3) I proactively track how people feel and check in directly." value={q3} onChange={setQ3} />
<Likert label="4) I often overcommit to help others, even if it costs me." value={q4} onChange={setQ4} />
<Likert label="5) I enjoy deep solo work more than constant meetings." value={q5} onChange={setQ5} />
<Likert label="6) I share wins and ask for credit when appropriate." value={q6} onChange={setQ6} />
</div>
<div>
<label className="block text-sm font-medium text-slate-800 mb-1">Personal Notes (anything about yourself)</label>
<textarea value={notes} onChange={(e)=>setNotes(e.target.value)} rows={4} className="w-full rounded-xl border border-slate-300 p-3 focus:outline-none focus:ring-2 focus:ring-slate-300" placeholder="Add context: role, industry, recent challenges, goals..." />
</div>
<div className="flex justify-end">
<button onClick={generateReport} className="rounded-xl border border-slate-300 px-4 py-2 text-sm hover:bg-slate-100">Generate CORe Identity Report</button>
</div>
</div>
</Card>
);
}

function CoreIdentityReport({ report }) {
if (!report) return null;
const { summary, tags, strengths, risks, growth, notes, raw } = report;
return (
<Card>
<div className="space-y-4">
<h3 className="text-lg font-semibold">Your CORe Identity Report</h3>
<p className="text-slate-700">{summary}</p>
<div className="flex flex-wrap gap-2">
{tags.map((t,i)=> (
<span key={i} className="text-xs px-2 py-1 rounded-full border border-slate-300 bg-white">{t}</span>
))}
</div>
<div className="grid grid-cols-1 md:grid-cols-3 gap-6">
<div>
<div className="font-semibold mb-1">Strengths</div>
<ul className="list-disc pl-5 text-sm text-slate-700 space-y-1">
{strengths.map((s,i)=>(<li key={i}>{s}</li>))}
</ul>
</div>
<div>
<div className="font-semibold mb-1">Risks / Watchouts</div>
<ul className="list-disc pl-5 text-sm text-slate-700 space-y-1">
{risks.map((r,i)=>(<li key={i}>{r}</li>))}
</ul>
</div>
<div>
<div className="font-semibold mb-1">Growth Actions</div>
<ul className="list-disc pl-5 text-sm text-slate-700 space-y-1">
{growth.map((g,i)=>(<li key={i}>{g}</li>))}
</ul>
</div>
</div>
{notes && (
<div>
<div className="font-semibold mb-1">Your Notes</div>
<p className="text-sm text-slate-700 whitespace-pre-wrap">{notes}</p>
</div>
)}
<details className="text-xs text-slate-500">
<summary>Raw Scores</summary>
<pre className="mt-1 bg-slate-50 p-2 rounded-lg border border-slate-200">{JSON.stringify(raw, null, 2)}</pre>
</details>
</div>
</Card>
);
}

// ---- Page ----
export default function ExecutiveMirrorPage() {
const handlePrint = () => window.print();
const [report, setReport] = useState(null);

return (
<div className="min-h-screen bg-slate-50 text-slate-800">
<header className="sticky top-0 z-10 backdrop-blur bg-white/70 border-b border-slate-200">
<div className="max-w-5xl mx-auto px-6 py-4 flex items-center justify-between">
<div className="flex items-center gap-3">
<Target className="w-6 h-6" />
<h1 className="text-2xl font-bold">Executive Identity & Growth Mirror</h1>
</div>
<div className="flex items-center gap-2">
<button onClick={handlePrint} className="inline-flex items-center gap-2 rounded-xl border border-slate-300 px-3 py-2 text-sm hover:bg-slate-100">
<Printer className="w-4 h-4" /> Print / Save PDF
</button>
</div>
</div>
</header>

<main className="max-w-5xl mx-auto px-6 py-8 space-y-8">
{/* Core Identity */}
<motion.div initial={{ opacity: 0, y: 8 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.4 }}>
<Card>
<div className="flex items-start gap-4">
<Brain className="w-6 h-6 mt-1" />
<div>
<h2 className="text-xl font-semibold mb-1">Core Identity</h2>
<p className="text-slate-700 leading-relaxed">{coreIdentity}</p>
</div>
</div>
</Card>
</motion.div>

{/* Two-column: Psychological + Career Branding */}
<div className="grid grid-cols-1 md:grid-cols-2 gap-6">
<motion.div initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.45 }}>
<Section title="Psychological Lens" icon={<Brain className="w-5 h-5" />}>
<Card>
<ul className="space-y-3 list-disc pl-5">
{psychological.map((p, i) => (
<li key={i}>
<span className="font-medium">{p.title}:</span> {p.detail}
</li>
))}
</ul>
</Card>
</Section>
</motion.div>

<motion.div initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}>
<Section title="Career Branding" icon={<LineChart className="w-5 h-5" />}>
<div className="grid grid-cols-1 gap-4">
{strengths.map((s, i) => (
<Card key={i} className="">
<div className="flex items-start gap-3">
<div className="mt-0.5 text-slate-700">{s.icon}</div>
<div>
<div className="font-semibold">{s.title}</div>
<div className="text-sm text-slate-700">{s.desc}</div>
</div>
</div>
</Card>
))}
</div>
</Section>
</motion.div>
</div>

{/* Mirror Diagram */}
<motion.div initial={{ opacity: 0, y: 12 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}>
<Section title="Mirror Diagram" icon={<ArrowRight className="w-5 h-5" />}>
<Card>
<MirrorDiagram />
</Card>
</Section>
</motion.div>

{/* Assessment */}
<motion.div initial={{ opacity: 0, y: 12 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.55 }}>
<Section title="CORe Identity Assessment" icon={<ShieldCheck className="w-5 h-5" />}>
<CoreIdentityAssessment onReport={setReport} />
</Section>
</motion.div>

{/* Report Output */}
<motion.div initial={{ opacity: 0, y: 12 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }}>
<Section title="Assessment Report" icon={<LineChart className="w-5 h-5" />}>
<CoreIdentityReport report={report} />
</Section>
</motion.div>

{/* Weakness Profile & Growth Map */}
<motion.div initial={{ opacity: 0, y: 12 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }}>
<Section title="Weakness Profile & Growth Map" icon={<AlertTriangle className="w-5 h-5" />}>
<div className="grid grid-cols-1 md:grid-cols-2 gap-6">
{weaknesses.map((w, i) => (
<Card key={i}>
<h3 className="text-base font-semibold">{w.title}</h3>
<div className="mt-2 text-sm text-slate-700 space-y-1">
<p><span className="font-medium">Example:</span> {w.example}</p>
<p><span className="font-medium">Cause:</span> {w.cause}</p>
<p><span className="font-medium">Strategy:</span> {w.strategy}</p>
</div>
</Card>
))}
</div>
</Section>
</motion.div>

{/* Mantra */}
<motion.div initial={{ opacity: 0, y: 12 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }}>
<Card>
<div className="flex items-start gap-3">
<ShieldCheck className="w-5 h-5 mt-0.5" />
<div>
<h3 className="text-base font-semibold">Mantra</h3>
<p className="text-slate-700">“{mantra}”</p>
</div>
</div>
</Card>
</motion.div>

{/* Footer actions */}
<div className="flex flex-wrap items-center gap-3 justify-end print:hidden">
<a
href="#"
onClick={handlePrint}
className="inline-flex items-center gap-2 rounded-xl border border-slate-300 px-3 py-2 text-sm hover:bg-slate-100"
>
<Printer className="w-4 h-4" /> Print / Save as PDF
</a>
</div>
</main>

<style>{`
@media print {
header { display: none; }
main { padding-top: 0; }
a { text-decoration: none; }
}
`}</style>
</div>
);
}